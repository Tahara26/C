Justin Tahara I did Field.c Partner: Rayne Jones 

The lab this week consisted of creating a game like Battle Ships on the Uno32. The player will be able to select locations for the four boats that they have and then battle against another opponent whether that be a human or artificial opponent. The first steps of the lab is to set up everything and then begin working on the functions. I worked on the functions inside of Field.c and my partner worked on the Protocol.c functions. Once those are completed and tested the two can move onto the ArtificialAgent.c file that uses both of the previous files that we had made and finally makes the game playable. Sending each other data back and fourth creates the turns and order for the players to alternate and battle each other trying to sink all of the opponents ships before theirs. 

I first read through the lab manual trying to understand the procedure of the lab and slowly began by deciding who was gonna do what and how we were gonna work on it together. I roughly understood what I had to do for Field.c and went to section on Friday to make sure I was understanding the concepts correctly and proceeded to move onto to coding the functions themselves. I got through all of the coding but then once I began testing I understood that my FieldAddBoat function was wrong and wasn’t functioning properly. The boats weren’t getting caught by the error when doing the North and West direction. I was using multiple switch cases but instead of doing that I chose to use if and else if statements and somehow fixed that issue. If I were to approach this lab differently I would write a lot of test code first in order to compare and fix things as I go along in the lab when writing the functions. I asked multiple TA’s a lot of questions in order to clear up confusion and to fix minor bugs along the way. My partner was very good in keeping track of work to do so that we were basically on the same page and were able to jump straight into the ArtificialAgent.c. There were some minor hiccups but overall having a partner was fine. The fact that we had to make our schedules work was a pain but we somehow managed to make time to meet up and work on the lab together. 

The lab was very difficult and took the longest by far. I am pretty sure our lab should work but there are some mysterious bugs. I would like to say I put in roughly 40 hours into this lab alone. I liked the fact that we got to work with partners because doing this lab alone would be impossible in one week. I disliked the difficulty to fix issues with the hardware due to the lack of decoding help and test code we had to make. I believe it was worthwhile because we got to see multiple pieces of hardware interact and send data to each other. I would really suggest rewriting some of the lab manual to help the students with the lab because there is a lot of uncertainty and vague descriptions in the lab manual. I believe the hardest parts of the lab would be combining the two files that my partner and I made into the ArtificialAgent.c and fixing all the issues it had when compiling and working on the Uno32. The point distribution seemed far and just. The lab manual was enough information to start the lab but not enough to finish the lab at all lacking details and information that I had to figure out with some help from the TA’s. The video that is on Canvas did not help that much because of how poor the video quality was. It was very hard to see what was going on and how the led’s lit up and I thought the video could have been much better. It didn’t show the white boxes on the screen when the boat couldn’t be placed and didn’t use one of the wires like the lab manual told us to do. The examples in class were somewhat helpful in understanding the concepts but were not enough to actually understand how to code the files and functions within them. I believe since the class is almost at an end by this point in the quarter, rather than teaching new material I believe we should focus on the labs more. 

